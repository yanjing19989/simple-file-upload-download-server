name: Build and Release

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        include:
          - os: ubuntu-latest
            platform: linux
            archive_ext: tar.gz
            archive_cmd: tar -czf
          - os: windows-latest
            platform: windows
            archive_ext: zip
            archive_cmd: 7z a

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.8'

    - name: Install PyInstaller
      run: pip install pyinstaller

    - name: Test application
      run: |
        python file.py --help
        echo "test content" > test.txt
        python -c "
        import os, json
        from file import UploadHTTPRequestHandler
        print('Application imports successfully')
        if os.path.exists('static/index.html'):
            print('Static files found')
        if os.path.exists('classic.html'):
            print('Classic HTML found')
        # Test that we can create the server class
        handler = UploadHTTPRequestHandler
        print('Server handler class created successfully')
        "
        rm test.txt
      shell: bash

    - name: Create PyInstaller spec file
      run: |
        cat > file.spec << 'SPECEOF'
        # -*- mode: python ; coding: utf-8 -*-

        a = Analysis(
            ['file.py'],
            pathex=[],
            binaries=[],
            datas=[
                # Static files and classic.html will be copied manually after build
                # to ensure they are in the same directory as the executable
            ],
            hiddenimports=[],
            hookspath=[],
            hooksconfig={},
            runtime_hooks=[],
            excludes=[],
            noarchive=False,
        )
        pyz = PYZ(a.pure)

        # Directory build
        exe_dir = EXE(
            pyz,
            a.scripts,
            [],
            exclude_binaries=True,
            name='simple-file-server',
            debug=False,
            bootloader_ignore_signals=False,
            strip=False,
            upx=True,
            console=True,
            disable_windowed_traceback=False,
            argv_emulation=False,
            target_arch=None,
            codesign_identity=None,
            entitlements_file=None,
        )
        coll = COLLECT(
            exe_dir,
            a.binaries,
            a.datas,
            strip=False,
            upx=True,
            upx_exclude=[],
            name='simple-file-server',
        )

        # Single file build
        exe_onefile = EXE(
            pyz,
            a.scripts,
            a.binaries,
            a.datas,
            [],
            name='simple-file-server-standalone',
            debug=False,
            bootloader_ignore_signals=False,
            strip=False,
            upx=True,
            upx_exclude=[],
            runtime_tmpdir=None,
            console=True,
            disable_windowed_traceback=False,
            argv_emulation=False,
            target_arch=None,
            codesign_identity=None,
            entitlements_file=None,
        )
        SPECEOF
      shell: bash

    - name: Build with PyInstaller
      run: |
        pyinstaller --clean file.spec
        echo "Verifying build outputs..."
        ls -la dist/
        if [ "${{ matrix.platform }}" = "windows" ]; then
          test -f "dist/simple-file-server/simple-file-server.exe" || exit 1
          test -f "dist/simple-file-server-standalone.exe" || exit 1
        else
          test -f "dist/simple-file-server/simple-file-server" || exit 1
          test -f "dist/simple-file-server-standalone" || exit 1
        fi
        echo "Build verification completed successfully"
      shell: bash

    - name: Copy static files to exe directory
      run: |
        echo "Copying static files and classic.html to exe directory..."
        # Copy static folder and classic.html to the directory build location
        cp -r static dist/simple-file-server/
        cp classic.html dist/simple-file-server/
        
        # For standalone build, create a folder with static files
        mkdir -p dist/simple-file-server-standalone-files
        if [ "${{ matrix.platform }}" = "windows" ]; then
          cp dist/simple-file-server-standalone.exe dist/simple-file-server-standalone-files/
        else
          cp dist/simple-file-server-standalone dist/simple-file-server-standalone-files/
        fi
        cp -r static dist/simple-file-server-standalone-files/
        cp classic.html dist/simple-file-server-standalone-files/
        
        echo "Static files copied successfully"
        echo "Directory structure after copying:"
        ls -la dist/simple-file-server/
        ls -la dist/simple-file-server-standalone-files/
      shell: bash

    - name: Create directory archive
      run: |
        cd dist
        ${{ matrix.archive_cmd }} simple-file-server-${{ matrix.platform }}-directory.${{ matrix.archive_ext }} simple-file-server
      shell: bash

    - name: Create standalone archive
      run: |
        cd dist
        ${{ matrix.archive_cmd }} simple-file-server-${{ matrix.platform }}-standalone.${{ matrix.archive_ext }} simple-file-server-standalone-files
      shell: bash

    - name: Upload directory build
      uses: actions/upload-artifact@v4
      with:
        name: simple-file-server-${{ matrix.platform }}-directory
        path: dist/simple-file-server-${{ matrix.platform }}-directory.${{ matrix.archive_ext }}

    - name: Upload standalone build
      uses: actions/upload-artifact@v4
      with:
        name: simple-file-server-${{ matrix.platform }}-standalone
        path: dist/simple-file-server-${{ matrix.platform }}-standalone.${{ matrix.archive_ext }}

    - name: Test built executables
      run: |
        cd dist
        echo "Testing directory build..."
        if [ "${{ matrix.platform }}" = "windows" ]; then
          ./simple-file-server/simple-file-server.exe --help || echo "Directory build help test completed"
        else
          ./simple-file-server/simple-file-server --help || echo "Directory build help test completed"
        fi
        
        echo "Testing standalone build..."
        if [ "${{ matrix.platform }}" = "windows" ]; then
          ./simple-file-server-standalone-files/simple-file-server-standalone.exe --help || echo "Standalone build help test completed"
        else
          ./simple-file-server-standalone-files/simple-file-server-standalone --help || echo "Standalone build help test completed"
        fi
        
        echo "Verifying static files are present..."
        test -d "simple-file-server/static" || echo "Warning: static directory not found in directory build"
        test -f "simple-file-server/classic.html" || echo "Warning: classic.html not found in directory build"
        test -d "simple-file-server-standalone-files/static" || echo "Warning: static directory not found in standalone build"
        test -f "simple-file-server-standalone-files/classic.html" || echo "Warning: classic.html not found in standalone build"
      shell: bash

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
    
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          simple-file-server-linux-directory/*
          simple-file-server-linux-standalone/*
          simple-file-server-windows-directory/*
          simple-file-server-windows-standalone/*
        body: |
          ## Downloads
          
          **Directory builds** (includes all files in a folder):
          - Linux: `simple-file-server-linux-directory.tar.gz`
          - Windows: `simple-file-server-windows-directory.zip`
          
          **Standalone builds** (single executable with static files):
          - Linux: `simple-file-server-linux-standalone.tar.gz`
          - Windows: `simple-file-server-windows-standalone.zip`
          
          ## Usage
          
          Extract and run:
          ```bash
          # Linux directory build
          tar -xzf simple-file-server-linux-directory.tar.gz
          cd simple-file-server
          ./simple-file-server -p 8000
          
          # Linux standalone
          tar -xzf simple-file-server-linux-standalone.tar.gz
          cd simple-file-server-standalone-files
          ./simple-file-server-standalone -p 8000
          
          # Windows - extract and run .exe files from the respective folders
          ```
          
          Visit `http://localhost:8000` in your browser after starting the server.
          
          **Note**: All builds now include the `static/` folder and `classic.html` file in the same directory as the executable, ensuring proper web interface functionality.
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}